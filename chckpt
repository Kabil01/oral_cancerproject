from flask import Flask, render_template, request
import pickle
import pandas as pd
from werkzeug.utils import secure_filename
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
import joblib
import os
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np

app = Flask(__name__)

model_file = 'model.pkl'
absolute_model_path = os.path.abspath(model_file)
rf_model = joblib.load(open(absolute_model_path, 'rb'))
encoder_file = 'label_encoder.pkl'
absolute_encoder_path = os.path.abspath(encoder_file)
label_encoder = joblib.load(absolute_encoder_path)

def predict_oral_cancer_cl(data):
    try:
        if data.shape[1] != len(rf_model.feature_importances_):
            raise ValueError("Input data shape does not match model's feature count.")
        
        predictions = rf_model.predict(data)
        return round(predictions[0], 3)
    except Exception as e:
        print(f"Error during prediction: {e}")
        return None
    
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

model = load_model('Oral cancer detection [img].keras')
class_names = ['cancer', 'non-cancer']

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def preprocess_image(img_path):
    img = image.load_img(img_path, target_size=(256, 256))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array /= 255.0
    return img_array
def create_upload_directory():
    if not os.path.exists(app.config['UPLOAD_FOLDER']):
        os.makedirs(app.config['UPLOAD_FOLDER'])

def predict_oral_cancer_img(img_path):
    img_array = preprocess_image(img_path)
    pred = model.predict(img_array)
    print(np.argmax(pred))
    predicted_class_index = np.argmax(pred)
    predicted_class = class_names[predicted_class_index]
    output = class_names[np.argmax(pred)]
    return output
   
@app.route('/', methods=['GET', 'POST'])
def home():
    create_upload_directory()
    if request.method == 'POST':
        input_data = {
            'localization': int(request.form['localization']),
            'size': request.form['size'],
            'tobacco_use': int(request.form['tobacco_use']),
            'alcohol_consumption': int(request.form['alcohol_consumption']),
            'sun_exposure': int(request.form['sun_exposure']),
            'gender': int(request.form['gender']),
            'age_group': int(request.form['age_group'])
        }

        input_df = pd.DataFrame([input_data])

        result_cl = predict_oral_cancer_cl(input_df)

        if 'file' not in request.files:
            print("DEBUG: No file part in POST request")
            return render_template('index.html', error="No file part")

        file = request.files['file']
        print("DEBUG: Filename in GET request:", file.filename)
        if file.filename == '':
            print("DEBUG: No selected file in POST request")
            return render_template('index.html', error="No selected file")

        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(file_path)
            print("DEBUG: File saved:", filename)

            result_img = predict_oral_cancer_img(file_path)
            print("DEBUG: Predicting oral cancer for:", filename)

            os.remove(file_path)
            print("DEBUG: Removed uploaded file:", filename)
            
            return render_template('result.html', result_cl=result_cl, result_img=result_img,class_names=class_names)

    return render_template('index.html')

   




if __name__ == '__main__':
    app.run(debug=True)




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Oral Cancer Prediction Result</title>
</head>
<body>
    <h1>Oral Cancer Prediction Result</h1>

    {% if result_cl == 0 %}
        <p>Risk of cancer is very low. Need not worry, relax.</p>
    {% elif result_cl == 1 %}
        <p>Risk of cancer is a little high. Consult an oncologist immediately. Alert!</p>
    {% else %}
        <p>Invalid result. Please check the prediction again.</p>
    {% endif %}
    {% for i in range(result_img|length) %}
            <li>{{ class_names[i] }}: {{ result_img[i] }}</li>
    {% endfor %}
</body>
</html>
